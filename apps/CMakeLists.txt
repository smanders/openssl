set(folder apps)
########################################
# cmake-generate progs.h
# patterned after progs.pl
set(conf_file progs.h)
set(INSERT_WARNING
  " * WARNING: do not edit!\n * Generated by apps/CMakeLists.txt and apps/${conf_file}.in"
  )
string(TIMESTAMP CURRENT_YEAR "%Y")
configure_file(${conf_file}.in ${conf_file} @ONLY)
#######
set(disablables
  cms dsa ec engine ocsp srp ts
  md2 md4 gost mdc2 rmd160 sm3
  aria camellia des idea seed rc4 rc2 bf cast rc5 sm4
  )
set(func_table "\n#ifdef INCLUDE_FUNCTION_TABLE\nstatic FUNCTION functions[] = {\n")
#######
set(ciphers_disabler sock)
set(genrsa_disabler rsa)
set(rsautl_disabler rsa)
set(gendsa_disabler dsa)
set(dsaparam_disabler dsa)
set(gendh_disabler dh)
set(dhparam_disabler dh)
set(ecparam_disabler ec)
set(pkcs12_disabler des)
foreach(cmd
  asn1parse
  ca ciphers cms crl crl2pkcs7
  dgst dhparam dsa dsaparam
  ec ecparam enc engine errstr
  gendsa genpkey genrsa
  help
  list
  nseq
  ocsp
  passwd pkcs12 pkcs7 pkcs8 pkey pkeyparam pkeyutl prime
  rand rehash req rsa rsautl
  s_client s_server s_time sess_id smime speed spkac srp storeutl
  ts
  verify version
  x509
  )
  set(extern_int "${extern_int}\nextern int ${cmd}_main(int argc, char *argv[]);")
  set(extern_const "${extern_const}\nextern const OPTIONS ${cmd}_options[];")
  set(func_entry "    {FT_general, \"${cmd}\", ${cmd}_main, ${cmd}_options},\n")
  if(cmd MATCHES "^s_")
    set(func_entry "#ifndef OPENSSL_NO_SOCK\n${func_entry}#endif\n")
  elseif(cmd IN_LIST disablables)
    string(TOUPPER ${cmd} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  elseif(DEFINED ${cmd}_disabler)
    string(TOUPPER ${${cmd}_disabler} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  endif()
  set(func_table "${func_table}${func_entry}")
endforeach()
#######
set(blake2b512_disabler blake2)
set(blake2s256_disabler blake2)
foreach(cmd
  md2 md4 md5
  gost
  sha1 sha224 sha256 sha384
  sha512 sha512-224 sha512-256
  sha3-224 sha3-256 sha3-384 sha3-512
  shake128 shake256
  mdc2 rmd160 blake2b512 blake2s256
  sm3
  )
  set(func_entry "    {FT_md, \"${cmd}\", dgst_main},\n")
  if(cmd IN_LIST disablables)
    string(TOUPPER ${cmd} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  elseif(DEFINED ${cmd}_disabler)
    string(TOUPPER ${${cmd}_disabler} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  endif()
  set(func_table "${func_table}${func_entry}")
endforeach()
#######
set(des3_disabler des)
set(desx_disabler des)
set(cast5_disabler cast)
foreach(cmd
  aes-128-cbc aes-128-ecb
  aes-192-cbc aes-192-ecb
  aes-256-cbc aes-256-ecb
  aria-128-cbc aria-128-cfb
  aria-128-ctr aria-128-ecb aria-128-ofb
  aria-128-cfb1 aria-128-cfb8
  aria-192-cbc aria-192-cfb
  aria-192-ctr aria-192-ecb aria-192-ofb
  aria-192-cfb1 aria-192-cfb8
  aria-256-cbc aria-256-cfb
  aria-256-ctr aria-256-ecb aria-256-ofb
  aria-256-cfb1 aria-256-cfb8
  camellia-128-cbc camellia-128-ecb
  camellia-192-cbc camellia-192-ecb
  camellia-256-cbc camellia-256-ecb
  base64 zlib
  des des3 desx idea seed rc4 rc4-40
  rc2 bf cast rc5
  des-ecb des-ede des-ede3
  des-cbc des-ede-cbc des-ede3-cbc
  des-cfb des-ede-cfb des-ede3-cfb
  des-ofb des-ede-ofb des-ede3-ofb
  idea-cbc idea-ecb idea-cfb idea-ofb
  seed-cbc seed-ecb seed-cfb seed-ofb
  rc2-cbc rc2-ecb rc2-cfb rc2-ofb rc2-64-cbc rc2-40-cbc
  bf-cbc bf-ecb bf-cfb bf-ofb
  cast5-cbc cast5-ecb cast5-cfb cast5-ofb
  cast-cbc rc5-cbc rc5-ecb rc5-cfb rc5-ofb
  sm4-cbc sm4-ecb sm4-cfb sm4-ofb sm4-ctr
  )
  set(func_entry "    {FT_cipher, \"${cmd}\", enc_main, enc_options},\n")
  string(REGEX MATCH "[^-]*" algo ${cmd})
  if(cmd STREQUAL zlib)
    set(func_entry "#ifdef ZLIB\n${func_entry}#endif\n")
  elseif(algo IN_LIST disablables)
    string(TOUPPER ${algo} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  elseif(DEFINED ${algo}_disabler)
    string(TOUPPER ${${algo}_disabler} DEF)
    set(func_entry "#ifndef OPENSSL_NO_${DEF}\n${func_entry}#endif\n")
  endif()
  set(func_table "${func_table}${func_entry}")
endforeach()
#######
set(func_table "${func_table}    {0, NULL, NULL}\n};\n#endif\n")
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${conf_file}
  "${extern_int}\n"
  "${extern_const}\n"
  "${func_table}"
  )
########################################
set(apps_lib_src
  apps.c
  apps.h
  opt.c
  s_cb.c
  s_socket.c
  app_rand.c
  bf_prefix.c
  )
source_group("" FILES ${apps_lib_src})
add_library(apps STATIC ${apps_lib_src})
target_link_libraries(apps PUBLIC include)
set_property(TARGET apps PROPERTY FOLDER ${folder})
list(APPEND apps_srcs ${apps_lib_src})
########################################
set(apps_openssl_src
  openssl.c
  asn1pars.c
  ca.c
  ciphers.c
  cms.c
  crl.c
  crl2p7.c
  dgst.c
  dhparam.c
  dsa.c
  dsaparam.c
  ec.c
  ecparam.c
  enc.c
  engine.c
  errstr.c
  gendsa.c
  genpkey.c
  genrsa.c
  nseq.c
  ocsp.c
  passwd.c
  pkcs12.c
  pkcs7.c
  pkcs8.c
  pkey.c
  pkeyparam.c
  pkeyutl.c
  prime.c
  rand.c
  req.c
  rsa.c
  rsautl.c
  s_apps.h
  s_client.c
  s_server.c
  s_time.c
  sess_id.c
  smime.c
  speed.c
  spkac.c
  srp.c
  testdsa.h
  testrsa.h
  timeouts.h
  ts.c
  verify.c
  version.c
  x509.c
  rehash.c
  storeutl.c
  )
source_group("" FILES ${apps_openssl_src})
add_executable(openssl ${apps_openssl_src})
target_include_directories(openssl PRIVATE ${CMAKE_CURRENT_BINARY_DIR}) # progs.h
target_link_libraries(openssl PRIVATE apps ssl)
list(APPEND apps_srcs ${apps_openssl_src})
########################################
# directories (ignore -- add to cmake)
foreach(d
  demoSRP
  )
  file(GLOB_RECURSE dir RELATIVE ${CMAKE_CURRENT_LIST_DIR} ${d}/*)
  list(APPEND apps_srcs ${dir})
endforeach()
########################################
# extra sources (part of cmake build)
list(APPEND apps_srcs
  CMakeLists.txt
  progs.h.in
  )
########################################
# extra sources (not part of build)
list(APPEND apps_srcs
  build.info
  ca-cert.srl
  ca-key.pem
  CA.pl.in
  ca-req.pem
  cert.pem
  client.pem
  ct_log_list.cnf
  dh1024.pem
  dh2048.pem
  dh4096.pem
  dsa1024.pem
  dsa512.pem
  dsa-ca.pem
  dsa-pca.pem
  dsap.pem
  openssl.cnf
  openssl-vms.cnf
  pca-cert.srl
  pca-key.pem
  pca-req.pem
  privkey.pem
  progs.pl
  req.pem
  rsa8192.pem
  s1024key.pem
  s1024req.pem
  s512-key.pem
  s512-req.pem
  server2.pem
  server.pem
  server.srl
  testCA.pem
  tsget.in
  vms_decc_init.c
  vms_term_sock.c
  vms_term_sock.h
  win32_init.c
  )
########################################
compareCmakeFilesys("${apps_srcs}")
